"""

Revision ID: 980e0d1f854e
Revises:
Create Date: 2025-05-24 11:36:43.225486

"""

import datetime
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "980e0d1f854e"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "title",
            sa.Enum(
                "SUPER_ADMIN",
                "ADMIN",
                "INTERNAL",
                "USER",
                "GUEST",
                "BLOCKED",
                name="usertypeenum",
            ),
            nullable=False,
        ),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("can_login", sa.Boolean(), nullable=False),
        sa.Column("can_create_own", sa.Boolean(), nullable=False),
        sa.Column("can_read_own", sa.Boolean(), nullable=False),
        sa.Column("can_update_own", sa.Boolean(), nullable=False),
        sa.Column("can_delete_own", sa.Boolean(), nullable=False),
        sa.Column("can_create_all", sa.Boolean(), nullable=False),
        sa.Column("can_read_all", sa.Boolean(), nullable=False),
        sa.Column("can_update_all", sa.Boolean(), nullable=False),
        sa.Column("can_delete_all", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_types_id"), "user_types", ["id"], unique=False)
    op.create_index(op.f("ix_user_types_title"), "user_types", ["title"], unique=True)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_blocked", sa.Boolean(), nullable=False),
        sa.Column("user_type_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_type_id"],
            ["user_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_name"), "users", ["name"], unique=False)
    op.create_index(
        op.f("ix_users_user_type_id"), "users", ["user_type_id"], unique=False
    )
    # ### end Alembic commands ###

    # Bulk insert default user types
    user_types_table = sa.table(
        "user_types",
        sa.column(
            "title",
            sa.Enum(
                "SUPER_ADMIN",
                "ADMIN",
                "INTERNAL",
                "USER",
                "GUEST",
                "BLOCKED",
                name="usertypeenum",
            ),
        ),
        sa.column("description", sa.String(length=255)),
        sa.column("can_login", sa.Boolean()),
        sa.column("can_create_own", sa.Boolean()),
        sa.column("can_read_own", sa.Boolean()),
        sa.column("can_update_own", sa.Boolean()),
        sa.column("can_delete_own", sa.Boolean()),
        sa.column("can_create_all", sa.Boolean()),
        sa.column("can_read_all", sa.Boolean()),
        sa.column("can_update_all", sa.Boolean()),
        sa.column("can_delete_all", sa.Boolean()),
        sa.column("created_at", sa.DateTime(timezone=True)),
        sa.column("updated_at", sa.DateTime(timezone=True)),
        sa.column("deleted_at", sa.DateTime(timezone=True)),
    )

    now = datetime.datetime.now(datetime.timezone.utc)

    default_types = [
        {
            "title": "SUPER_ADMIN",
            "description": "Super administrator with all permissions.",
            "can_login": True,
            "can_create_own": True,
            "can_read_own": True,
            "can_update_own": True,
            "can_delete_own": True,
            "can_create_all": True,
            "can_read_all": True,
            "can_update_all": True,
            "can_delete_all": True,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
        {
            "title": "ADMIN",
            "description": "Administrator with elevated permissions.",
            "can_login": True,
            "can_create_own": True,
            "can_read_own": True,
            "can_update_own": True,
            "can_delete_own": True,
            "can_create_all": True,
            "can_read_all": True,
            "can_update_all": True,
            "can_delete_all": False,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
        {
            "title": "INTERNAL",
            "description": "Internal user with limited permissions.",
            "can_login": True,
            "can_create_own": True,
            "can_read_own": True,
            "can_update_own": True,
            "can_delete_own": True,
            "can_create_all": False,
            "can_read_all": True,
            "can_update_all": True,
            "can_delete_all": False,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
        {
            "title": "USER",
            "description": "Regular user.",
            "can_login": True,
            "can_create_own": True,
            "can_read_own": True,
            "can_update_own": True,
            "can_delete_own": True,
            "can_create_all": False,
            "can_read_all": False,
            "can_update_all": False,
            "can_delete_all": False,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
        {
            "title": "GUEST",
            "description": "Guest user with minimal permissions.",
            "can_login": True,
            "can_create_own": False,
            "can_read_own": True,
            "can_update_own": False,
            "can_delete_own": False,
            "can_create_all": False,
            "can_read_all": False,
            "can_update_all": False,
            "can_delete_all": False,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
        {
            "title": "BLOCKED",
            "description": "Blocked user.",
            "can_login": False,
            "can_create_own": False,
            "can_read_own": False,
            "can_update_own": False,
            "can_delete_own": False,
            "can_create_all": False,
            "can_read_all": False,
            "can_update_all": False,
            "can_delete_all": False,
            "created_at": now,
            "updated_at": now,
            "deleted_at": None,
        },
    ]

    op.bulk_insert(user_types_table, default_types)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_user_type_id"), table_name="users")
    op.drop_index(op.f("ix_users_name"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_user_types_title"), table_name="user_types")
    op.drop_index(op.f("ix_user_types_id"), table_name="user_types")
    op.drop_table("user_types")
    # ### end Alembic commands ###
    # Drop the enum type
    user_type_enum = sa.Enum(
        name="usertypeenum",
    )
    user_type_enum.drop(op.get_bind())
